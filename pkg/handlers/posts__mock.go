// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go

package handlers

import (
	gomock "github.com/golang/mock/gomock"
	post "redditclone/pkg/post"
	user "redditclone/pkg/user"
	reflect "reflect"
)

// MockPostsRepoInterface is a mock of PostsRepoInterface interface
type MockPostsRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepoInterfaceMockRecorder
}

// MockPostsRepoInterfaceMockRecorder is the mock recorder for MockPostsRepoInterface
type MockPostsRepoInterfaceMockRecorder struct {
	mock *MockPostsRepoInterface
}

// NewMockPostsRepoInterface creates a new mock instance
func NewMockPostsRepoInterface(ctrl *gomock.Controller) *MockPostsRepoInterface {
	mock := &MockPostsRepoInterface{ctrl: ctrl}
	mock.recorder = &MockPostsRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPostsRepoInterface) EXPECT() *MockPostsRepoInterfaceMockRecorder {
	return _m.recorder
}

// GetAll mocks base method
func (_m *MockPostsRepoInterface) GetAll() ([]*post.Post, error) {
	ret := _m.ctrl.Call(_m, "GetAll")
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (_mr *MockPostsRepoInterfaceMockRecorder) GetAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAll", reflect.TypeOf((*MockPostsRepoInterface)(nil).GetAll))
}

// GetByCategory mocks base method
func (_m *MockPostsRepoInterface) GetByCategory(_param0 string) ([]*post.Post, error) {
	ret := _m.ctrl.Call(_m, "GetByCategory", _param0)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory
func (_mr *MockPostsRepoInterfaceMockRecorder) GetByCategory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByCategory", reflect.TypeOf((*MockPostsRepoInterface)(nil).GetByCategory), arg0)
}

// GetByID mocks base method
func (_m *MockPostsRepoInterface) GetByID(_param0 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "GetByID", _param0)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (_mr *MockPostsRepoInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByID", reflect.TypeOf((*MockPostsRepoInterface)(nil).GetByID), arg0)
}

// GetByAuthor mocks base method
func (_m *MockPostsRepoInterface) GetByAuthor(_param0 string) ([]*post.Post, error) {
	ret := _m.ctrl.Call(_m, "GetByAuthor", _param0)
	ret0, _ := ret[0].([]*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAuthor indicates an expected call of GetByAuthor
func (_mr *MockPostsRepoInterfaceMockRecorder) GetByAuthor(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByAuthor", reflect.TypeOf((*MockPostsRepoInterface)(nil).GetByAuthor), arg0)
}

// Add mocks base method
func (_m *MockPostsRepoInterface) Add(_param0 *post.Post) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "Add", _param0)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (_mr *MockPostsRepoInterfaceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Add", reflect.TypeOf((*MockPostsRepoInterface)(nil).Add), arg0)
}

// Comment mocks base method
func (_m *MockPostsRepoInterface) Comment(_param0 string, _param1 *user.User, _param2 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "Comment", _param0, _param1, _param2)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Comment indicates an expected call of Comment
func (_mr *MockPostsRepoInterfaceMockRecorder) Comment(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Comment", reflect.TypeOf((*MockPostsRepoInterface)(nil).Comment), arg0, arg1, arg2)
}

// DeleteComment mocks base method
func (_m *MockPostsRepoInterface) DeleteComment(_param0 string, _param1 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "DeleteComment", _param0, _param1)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (_mr *MockPostsRepoInterfaceMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsRepoInterface)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method
func (_m *MockPostsRepoInterface) DeletePost(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeletePost", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (_mr *MockPostsRepoInterfaceMockRecorder) DeletePost(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeletePost", reflect.TypeOf((*MockPostsRepoInterface)(nil).DeletePost), arg0)
}

// Upvote mocks base method
func (_m *MockPostsRepoInterface) Upvote(_param0 string, _param1 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "Upvote", _param0, _param1)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote
func (_mr *MockPostsRepoInterfaceMockRecorder) Upvote(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Upvote", reflect.TypeOf((*MockPostsRepoInterface)(nil).Upvote), arg0, arg1)
}

// Downvote mocks base method
func (_m *MockPostsRepoInterface) Downvote(_param0 string, _param1 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "Downvote", _param0, _param1)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downvote indicates an expected call of Downvote
func (_mr *MockPostsRepoInterfaceMockRecorder) Downvote(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Downvote", reflect.TypeOf((*MockPostsRepoInterface)(nil).Downvote), arg0, arg1)
}

// Unvote mocks base method
func (_m *MockPostsRepoInterface) Unvote(_param0 string, _param1 string) (*post.Post, error) {
	ret := _m.ctrl.Call(_m, "Unvote", _param0, _param1)
	ret0, _ := ret[0].(*post.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unvote indicates an expected call of Unvote
func (_mr *MockPostsRepoInterfaceMockRecorder) Unvote(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Unvote", reflect.TypeOf((*MockPostsRepoInterface)(nil).Unvote), arg0, arg1)
}
