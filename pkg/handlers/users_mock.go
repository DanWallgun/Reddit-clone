// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

package handlers

import (
	gomock "github.com/golang/mock/gomock"
	session "redditclone/pkg/session"
	user "redditclone/pkg/user"
	reflect "reflect"
)

// MockUsersRepoInterface is a mock of UsersRepoInterface interface
type MockUsersRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoInterfaceMockRecorder
}

// MockUsersRepoInterfaceMockRecorder is the mock recorder for MockUsersRepoInterface
type MockUsersRepoInterfaceMockRecorder struct {
	mock *MockUsersRepoInterface
}

// NewMockUsersRepoInterface creates a new mock instance
func NewMockUsersRepoInterface(ctrl *gomock.Controller) *MockUsersRepoInterface {
	mock := &MockUsersRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUsersRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockUsersRepoInterface) EXPECT() *MockUsersRepoInterfaceMockRecorder {
	return _m.recorder
}

// GetByID mocks base method
func (_m *MockUsersRepoInterface) GetByID(_param0 string) (*user.User, error) {
	ret := _m.ctrl.Call(_m, "GetByID", _param0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (_mr *MockUsersRepoInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetByID", reflect.TypeOf((*MockUsersRepoInterface)(nil).GetByID), arg0)
}

// Register mocks base method
func (_m *MockUsersRepoInterface) Register(_param0 string, _param1 string) (*user.User, error) {
	ret := _m.ctrl.Call(_m, "Register", _param0, _param1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (_mr *MockUsersRepoInterfaceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Register", reflect.TypeOf((*MockUsersRepoInterface)(nil).Register), arg0, arg1)
}

// Authorize mocks base method
func (_m *MockUsersRepoInterface) Authorize(_param0 string, _param1 string) (*user.User, error) {
	ret := _m.ctrl.Call(_m, "Authorize", _param0, _param1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize
func (_mr *MockUsersRepoInterfaceMockRecorder) Authorize(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Authorize", reflect.TypeOf((*MockUsersRepoInterface)(nil).Authorize), arg0, arg1)
}

// MockSessionsManagerInterface is a mock of SessionsManagerInterface interface
type MockSessionsManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsManagerInterfaceMockRecorder
}

// MockSessionsManagerInterfaceMockRecorder is the mock recorder for MockSessionsManagerInterface
type MockSessionsManagerInterfaceMockRecorder struct {
	mock *MockSessionsManagerInterface
}

// NewMockSessionsManagerInterface creates a new mock instance
func NewMockSessionsManagerInterface(ctrl *gomock.Controller) *MockSessionsManagerInterface {
	mock := &MockSessionsManagerInterface{ctrl: ctrl}
	mock.recorder = &MockSessionsManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSessionsManagerInterface) EXPECT() *MockSessionsManagerInterfaceMockRecorder {
	return _m.recorder
}

// Create mocks base method
func (_m *MockSessionsManagerInterface) Create(_param0 string) (*session.Session, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (_mr *MockSessionsManagerInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Create", reflect.TypeOf((*MockSessionsManagerInterface)(nil).Create), arg0)
}
