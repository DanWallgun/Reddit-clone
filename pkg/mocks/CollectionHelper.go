// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	"redditclone/pkg/wrap"

	mock "github.com/stretchr/testify/mock"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// CollectionHelper is an autogenerated mock type for the CollectionHelper type
type CollectionHelper struct {
	mock.Mock
}

// DeleteOne provides a mock function with given fields: _a0, _a1, _a2
func (_m *CollectionHelper) DeleteOne(_a0 context.Context, _a1 interface{}, _a2 ...*options.DeleteOptions) (wrap.DeleteResultHelper, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 wrap.DeleteResultHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.DeleteOptions) wrap.DeleteResultHelper); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrap.DeleteResultHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.DeleteOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *CollectionHelper) Find(_a0 context.Context, _a1 interface{}, _a2 ...*options.FindOptions) (wrap.CursorHelper, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 wrap.CursorHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) wrap.CursorHelper); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrap.CursorHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertOne provides a mock function with given fields: _a0, _a1, _a2
func (_m *CollectionHelper) InsertOne(_a0 context.Context, _a1 interface{}, _a2 ...*options.InsertOneOptions) (wrap.InsertOneResultHelper, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 wrap.InsertOneResultHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.InsertOneOptions) wrap.InsertOneResultHelper); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrap.InsertOneResultHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.InsertOneOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceOne provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CollectionHelper) ReplaceOne(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...*options.ReplaceOptions) (wrap.UpdateResultHelper, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 wrap.UpdateResultHelper
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) wrap.UpdateResultHelper); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrap.UpdateResultHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.ReplaceOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
